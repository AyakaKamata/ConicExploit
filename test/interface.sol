// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "./IERC20.sol";
import "./IFlashLoanRecipient.sol";

interface WETH is IERC20 {

    function deposit() external payable;

    function withdraw(uint256 amount) external;

}

interface AaveV2 {
    function flashLoan(
        address receiver,
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata modes,
        address reserve,
        bytes calldata params,
        uint16 referral
    ) external;
}

interface AaveV3 {
    function flashLoanSimple(address receiver, address assets, uint256 amounts, bytes memory params, uint16 referral)
        external;
}

interface Vyper {
    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth, address receiver) external;

    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount, bool use_eth, address receiver)
        external
        payable
         returns (uint256);


    function remove_liquidity(uint256 amount, uint256[2] calldata min_amounts, bool use_eth, address receiver)
        external;
function balances(uint256) external returns (uint256);
}

interface Lido {
    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;

    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external payable returns (uint256);

    function remove_liquidity(uint256 burn_amount, uint256[2] calldata min_amounts) external;
    function balances(uint256) external returns (uint256);
}

interface Conic {
    function deposit(uint256 amount, uint256 minLp, bool stake) external returns (uint256);

    function withdraw(uint256 lp_amount, uint256 min_under) external;

    function handleDepeggedCurvePool(address pool) external;
    function totalUnderlying() external returns (uint256);
}

interface Balancer {
    function flashLoan(
        IFlashLoanRecipient receiver,
        IERC20[] calldata tokens,
        uint256[] calldata amounts,
        bytes calldata params
    ) external;
}

interface GenericOracleV2{
    function getUSDPrice(address token)external view returns(uint256);
}
